# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD .NET + Docker

on:
  push:
    branches:
      - main
      - develop   # chỉ chạy khi push vào branch development
  pull_request:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: self-hosted

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./WebApplication2/Dockerfile
          push: true
          tags: ngoanh93/yourapp:latest
          
      - name: Pull latest image
        run: docker pull ngoanh93/yourapp:latest

      - name: Stop old container
        run: |
          if (docker ps -q -f "name=yourapp") {
              docker rm -f yourapp
          } else {
              Write-Output "Container yourapp not found, skip remove"
          }

      - name: Run new container
        run: docker run -d --name yourapp -p 9600:8080 -e ASPNETCORE_ENVIRONMENT="Development" -v ${{ github.workspace }}\WebApplication2\appsettings.Development.json:/app/appsettings.Development.json --network=postgres_postgres ngoanh93/yourapp:latest
      
      - name: Notify Telegram (success)
        if: success()   # luôn gửi thông báo (kể cả fail)
        run: |
          $TOKEN = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          $CHAT_ID = "${{ secrets.TELEGRAM_CHAT_ID }}"

          $SERVICE_NAME = "yourapp"   # thay bằng tên service thật
          $PROJECT_URL = "https://github.com/${{ github.repository }}.git"
          $USER_COMMIT = git log -1 --pretty=format:'%an <%ae>'
          $COMMIT_TITLE = git log -1 --pretty=%s
          $COMMIT_SHA = git rev-parse HEAD
          $PIPELINE_URL = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $USER_CICD = "${{ github.actor }}"

          $MESSAGE = @"
          ✅ CICD dự án $SERVICE_NAME ($env:GITHUB_REF_NAME) thành công:
            
            Service name: $SERVICE_NAME
            Project url: $PROJECT_URL
            User commit: $USER_COMMIT
            Commit title: $COMMIT_TITLE
            Commit SHA: $COMMIT_SHA
            
            Pipeline url: $PIPELINE_URL
            User CICD: $USER_CICD
          "@
          $Body = @{
            chat_id = $CHAT_ID
            text    = $MESSAGE
          } | ConvertTo-Json -Depth 3 -Compress
          $Utf8Body = [System.Text.Encoding]::UTF8.GetBytes($Body)
          Invoke-RestMethod -Uri "https://api.telegram.org/bot$TOKEN/sendMessage" `
            -Method Post `
            -ContentType "application/json; charset=utf-8" `
            -Body $Utf8Body
            
      - name: Notify Telegram (failure)
        if: failure()   # luôn gửi thông báo (kể cả fail)
        run: |
          $TOKEN = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          $CHAT_ID = "${{ secrets.TELEGRAM_CHAT_ID }}"

          $SERVICE_NAME = "yourapp"   # thay bằng tên service thật
          $PROJECT_URL = "https://github.com/${{ github.repository }}.git"
          $USER_COMMIT = git log -1 --pretty=format:'%an <%ae>'
          $COMMIT_TITLE = git log -1 --pretty=%s
          $COMMIT_SHA = git rev-parse HEAD
          $PIPELINE_URL = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $USER_CICD = "${{ github.actor }}"
          
          # Lấy log lỗi (20 dòng cuối)
          $LogFile = "error_log.txt"
          Get-Content $env:GITHUB_STEP_SUMMARY -Tail 50 | Out-File -FilePath $LogFile
          
          $MESSAGE = @"
          ❌ CICD dự án $SERVICE_NAME ($env:GITHUB_REF_NAME) thất bại:
            
            Service name: $SERVICE_NAME
            Project url: $PROJECT_URL
            User commit: $USER_COMMIT
            Commit title: $COMMIT_TITLE
            Commit SHA: $COMMIT_SHA
            
            Pipeline url: $PIPELINE_URL
            User CICD: $USER_CICD
          "@
          $Body = @{
            chat_id = $CHAT_ID
            text    = $MESSAGE
          } | ConvertTo-Json -Depth 3 -Compress
          $Utf8Body = [System.Text.Encoding]::UTF8.GetBytes($Body)
          Invoke-RestMethod -Uri "https://api.telegram.org/bot$TOKEN/sendMessage" `
            -Method Post `
            -ContentType "application/json; charset=utf-8" `
            -Body $Utf8Body

          # Upload file log
          $Form = @{
            chat_id = $CHAT_ID
            document = Get-Item $LogFile
          }
          Invoke-RestMethod -Uri "https://api.telegram.org/bot$TOKEN/sendDocument" -Method Post -Form $Form

